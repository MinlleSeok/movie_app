{"version":3,"sources":["movie/index.js","app/index.js","serviceWorker.js","index.js"],"names":["MoviePoster","poster","alt","src","title","className","Movie","link","genres","synopsis","href","style","textDecoration","color","text","maxLine","ellipsis","trimRight","basedOn","App","state","_renderMovies","movies","map","movie","index","display_title","multimedia","url","key","headline","summary_short","_getMovies","a","async","_callApi","setState","fetch","then","response","json","results","catch","err","console","log","this","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"8UAqCA,SAASA,EAAT,GAAsC,IAAfC,EAAc,EAAdA,OAAQC,EAAM,EAANA,IAC3B,OACI,yBAAKC,IAAKF,EAAQC,IAAKA,EAAKE,MAAOF,EAAKG,UAAU,kBAmB3CC,MArDf,YAAyD,IAAzCF,EAAwC,EAAxCA,MAAOH,EAAiC,EAAjCA,OAAQM,EAAyB,EAAzBA,KAAMC,EAAmB,EAAnBA,OAAQC,EAAW,EAAXA,SACzC,OACI,yBAAKJ,UAAU,SACX,yBAAKA,UAAU,iBACX,kBAACL,EAAD,CAAaC,OAAQA,EAAQC,IAAKE,KAEtC,yBAAKC,UAAU,iBACX,4BAAKD,GACL,yBAAKC,UAAU,iBACX,uBAAGK,KAAMH,EAAMI,MAAO,CAAEC,eAAgB,OAAQC,MAAO,UAAYL,IAEvE,yBAAKH,UAAU,mBACX,kBAAC,IAAD,CACIS,KAAML,EACNM,QAAQ,IACRC,SAAS,MACTC,WAAS,EACTC,QAAQ,gBC4BjBC,E,2MA5CbC,MAAQ,G,EAORC,cAAgB,WAUd,OATe,EAAKD,MAAME,OAAOC,KAAI,SAACC,EAAOC,GAC3C,OAAO,kBAAC,EAAD,CACLrB,MAAOoB,EAAME,cACbzB,OAAQuB,EAAMG,WAAWxB,IACzBI,KAAMiB,EAAMjB,KAAKqB,IACjBC,IAAKJ,EACLjB,OAAQgB,EAAMM,SACdrB,SAAUe,EAAMO,oB,EAKtBC,WAAa,0BAAAC,EAAAC,OAAA,kEAAAD,EAAA,MACU,EAAKE,YADf,OACLb,EADK,OAEX,EAAKc,SAAS,CACZd,WAHS,sC,EAOba,SAAW,WACT,OAAOE,MAAM,sGACZC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAE,GAAI,OAAIA,EAAKC,WAClBC,OAAM,SAAAC,GAAG,OAAIC,QAAQC,IAAIF,O,mFA3B1BG,KAAKd,e,+BA8BG,IACAV,EAAWwB,KAAK1B,MAAhBE,OACR,OACE,yBAAKjB,UAAWiB,EAAS,MAAQ,gBAC9BA,EAASwB,KAAKzB,gBAAkB,e,GAxCvB0B,aCQEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMrB,MAAK,SAAAsB,GACjCA,EAAaC,kB","file":"static/js/main.a7fd30ab.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport LinesEllipsis from 'react-lines-ellipsis';\nimport './Movie.css';\n\nfunction Movie({title, poster, link, genres, synopsis}) {\n    return (\n        <div className=\"Movie\">\n            <div className=\"Movie__Column\">\n                <MoviePoster poster={poster} alt={title} />\n            </div>\n            <div className=\"Movie__Column\">\n                <h1>{title}</h1>\n                <div className=\"Movie__Genres\">\n                    <a href={link} style={{ textDecoration: \"none\", color: \"green\" }}>{genres}</a>\n                </div>\n                <div className=\"Movie__Synopsis\">\n                    <LinesEllipsis\n                        text={synopsis}\n                        maxLine='3'\n                        ellipsis='...'\n                        trimRight\n                        basedOn='letters'\n                    />\n                </div>\n            </div>\n        </div>\n    )\n}\n\nfunction MovieGenre({genre}){\n    return (\n        <span className=\"Movie__Genre\">{genre}</span>\n    )\n}\n\n/* return을 위한 컴포넌트(1개 props 1개 html 태그)) */\nfunction MoviePoster ({poster, alt}) {\n    return (\n        <img src={poster} alt={alt} title={alt} className=\"Movie__Poster\" />\n    )\n}\n\nMovie.propTypes = {\n    title: PropTypes.string.isRequired,\n    poster: PropTypes.string.isRequired,\n    genres: PropTypes.array.isRequired,\n    synopsis: PropTypes.string.isRequired\n}\n\nMoviePoster.propTypes = {\n    poster: PropTypes.string.isRequired,\n    alt: PropTypes.string.isRequired\n}\n\nMovieGenre.propTypes = {\n    genre: PropTypes.string.isRequired \n}\nexport default Movie","import React, { Component } from 'react';\nimport './App.css';\nimport Movie from '../movie';\n\nclass App extends Component {\n\n  state = {\n  }\n\n  componentDidMount () {\n    this._getMovies();\n  }\n\n  _renderMovies = () => {\n    const movies = this.state.movies.map((movie, index) => {\n      return <Movie \n        title={movie.display_title} \n        poster={movie.multimedia.src}\n        link={movie.link.url}\n        key={index} \n        genres={movie.headline}\n        synopsis={movie.summary_short} />\n    })\n    return movies\n  }\n\n  _getMovies = async () => {\n    const movies = await this._callApi()\n    this.setState({\n      movies\n    })\n  }\n\n  _callApi = () => {\n    return fetch('https://api.nytimes.com/svc/movies/v2/reviews/search.json?api-key=MGYGHDV4asweN8ac8wSIGYDd9L2ZXaPU')\n    .then(response => response.json())\n    .then(json => json.results) // arrow function(=>) return 기능 내장\n    .catch(err => console.log(err)) // .catch(function(err) { console.log(err) })\n  }\n\n  render() {\n    const { movies } = this.state;\n    return (\n      <div className={movies ? \"App\" : \"App--loading\"}>\n        {movies ? this._renderMovies() : 'Loading'}\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './app';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}